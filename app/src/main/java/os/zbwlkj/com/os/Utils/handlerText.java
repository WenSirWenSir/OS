package os.zbwlkj.com.os.Utils;import android.annotation.SuppressLint;import android.content.Context;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.text.Html;import android.text.TextPaint;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.TextView;/** * 处理文字边框 */public class handlerText {    private String MSG = "handlerText.java[+]";    private static handlerText _handlerText = new handlerText();    public static TextView tv;    public handlerText get(TextView _tv) {        this.tv = _tv;        return _handlerText;    }    public handlerText setText(String _text) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            tv.setText(_text.trim());        }        return _handlerText;    }    public handlerText setText(int _text) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不为空");        } else {            tv.setText(_text);        }        return _handlerText;    }    public handlerText setTextColor(String _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            if (TextUtils.isEmpty(_color)) {                Log.e(MSG, "错误:设置的颜色为空 对应文字为:" + this.tv.getText().toString().trim());            } else {                this.tv.setTextColor(Color.parseColor(_color.trim()));            }        }        return _handlerText;    }    public handlerText setTextColor(int _color) {        if (tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            tv.setTextColor(_color);        }        return _handlerText;    }    public handlerText setTextSize(int _size) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setTextSize(_size);        }        return _handlerText;    }    public handlerText setBackColor(String _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackgroundColor(Color.parseColor(_color));        }        return _handlerText;    }    public handlerText setBackColor(int _color) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackgroundColor(_color);        }        return _handlerText;    }    /**     * 设置中划线     *     * @return     */    public handlerText setMidcourtLine() {        tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG | Paint.ANTI_ALIAS_FLAG);        return _handlerText;    }    @SuppressLint("NewApi")    public handlerText setBackground(Drawable _background) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            this.tv.setBackground(_background);        }        return _handlerText;    }    public handlerText setBoldText(boolean is) {        if (this.tv == null) {            Log.i(MSG, "文字工具,设置的TextView不能为空");        } else {            TextPaint textPaint = this.tv.getPaint();            textPaint.setFakeBoldText(is);        }        return _handlerText;    }    /**     * 只需要传入对应的上下文 和 字体的名称 不要加.ttf     *     * @param _context  上下文对象     * @param _fontFile 文字名称     * @return     */    public handlerText setFontFile(Context _context, String _fontFile) {        Typeface typeface = Typeface.createFromAsset(_context.getAssets(), "font/" + _fontFile +                ".ttf");        this.tv.setTypeface(typeface);        return _handlerText;    }    /**     * 设置不显示控件     *     * @param is     * @return     */    public handlerText setVisibility(boolean is) {        if (is) {            /*显示*/            this.tv.setVisibility(View.VISIBLE);        } else {            /*不显示*/            this.tv.setVisibility(View.GONE);        }        return _handlerText;    }    /**     * 设置Html文档显示     *     * @return     */    public handlerText setHtmlText(String htmlData) {        if (!htmlData.equals("")) {            this.tv.setText(Html.fromHtml(htmlData.trim()));            return _handlerText;        } else {            return _handlerText;        }    }    /**     * 设置Tag的内容     *     * @return     */    public handlerText setTag(Object tag) {        if (tag != null) {            this.tv.setTag(tag);            return _handlerText;        } else {            return _handlerText;        }    }    /**     * 设置监听事件     */    public handlerText setOnClick(View.OnClickListener onClick) {        if (onClick != null) {            this.tv.setOnClickListener(onClick);            return _handlerText;        } else {            return _handlerText;        }    }    public String getTexttoString() {        return this.tv.getText().toString().trim();    }}