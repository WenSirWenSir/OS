package os.zbwlkj.com.os.Class;import android.app.Activity;import android.app.ActivityOptions;import android.content.Intent;import android.graphics.Color;import android.os.Build;import android.support.v4.app.FragmentActivity;import android.transition.Explode;import android.transition.Fade;import android.transition.Slide;import android.transition.Visibility;import android.util.DisplayMetrics;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.WindowManager;import android.widget.Toast;import os.zbwlkj.com.os.Utils.Utils;import static android.view.View.SYSTEM_UI_FLAG_LAYOUT_STABLE;public class act_class extends Activity {    private Boolean isBackTwo = false;//退出再按一次    private Boolean isBackOk = false;    private String MSG = "act_class.java[+]";    protected void StartAct(Class<?> Bclass, Boolean ColseF) {        Intent intent = new Intent(this, Bclass);        ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(this);        startActivity(intent, options != null ? options.toBundle() : null);        if (ColseF) {            this.finish();        }        //界面动画    }    protected void StartActforResult(Class<?> mClass, Boolean ColseF, int requestCode) {        Intent i = new Intent();        i.setClass(this, mClass);        startActivityForResult(i, requestCode);        if (ColseF) {            this.finish();        }    }    protected void StartActwithBundler(Class<?> Bclass, Boolean ColoseF, String... values) {        Intent intent = new Intent();        for (int i = 0; i < values.length; i += 2) {            intent.putExtra(values[i], values[i + 1]);        }        intent.setClass(this, Bclass);        this.startActivity(intent);        if (ColoseF) {            this.finish();        } else {        }    }    protected String getBundlerValue(String key) {        try {            Intent intent = getIntent();            if (intent == null) {                Log.e("act_class.java[+]", "界面传值的Intent为空");                return "";            } else {                Log.i("act_class.java[+]", "要获取的KEY为:" + key);                if (intent.getStringExtra(key.trim()) != null) {                    return intent.getStringExtra(key);                } else {                    Log.e("act_class.java[+]", "没有获取到数据信息");                    return "";                }            }        } catch (Exception e) {            Log.e("act_class.java[+]", e.getMessage());            return "";        }    }    protected void setStatusBar(String tColor) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            //5.O版本及以上            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);            View decorView = getWindow().getDecorView();            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | SYSTEM_UI_FLAG_LAYOUT_STABLE;            decorView.setSystemUiVisibility(option);            getWindow().setStatusBarColor(Color.parseColor(tColor));        }    }    /**     * 设置透明状态栏     */    protected void setTransparentBar() {        try {            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        } catch (Exception e) {            e.printStackTrace();        }    }    protected void setBackStatic(Boolean i) {        if (i) {            isBackTwo = true;            isBackOk = false;        } else {            isBackTwo = false;        }    }    @Override    public void onBackPressed() {        /*判断是否需要退出提示*/        if (isBackTwo) {            if (isBackOk) {                super.onBackPressed();            } else {                isBackOk = true;                Toast.makeText(this, "再按一次退出", Toast.LENGTH_LONG).show();            }        } else {            super.onBackPressed();        }    }    /**     * 获取屏幕宽度     *     * @return     */    protected int getWidthPixels() {        DisplayMetrics outMetrics = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(outMetrics);        return outMetrics.widthPixels;    }    /**     * 获取屏幕的高度     *     * @return     */    protected int getHeightPixels() {        DisplayMetrics outMetrics = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(outMetrics);        return outMetrics.heightPixels;    }    /**     * 设置进场动画     */    protected void setInTransition(int _mode) {        switch (_mode) {            case action_class.TRANSITION.SLIDE:                Slide slide = new Slide();                slide.setDuration(500);                slide.setMode(Visibility.MODE_IN);                slide.setSlideEdge(Gravity.TOP);                getWindow().setEnterTransition(slide);                break;            case action_class.TRANSITION.FADE:                break;            case action_class.TRANSITION.EXPLODE:                Explode explode = new Explode();                explode.setMode(Visibility.MODE_IN);                explode.setStartDelay(100);                getWindow().setEnterTransition(explode);                break;        }    }    /**     * 设置平移进场动画     *     * @param _duraction     * @param _mode     * @param _intoEdge     */    protected void setInTransitionWithSlide(int _duraction, int _mode, int _intoEdge) {        Slide slide = new Slide();        slide.setDuration(_duraction);        slide.setMode(_mode);        slide.setSlideEdge(_intoEdge);        getWindow().setEnterTransition(slide);    }    /**     * 设置退出时的动画     *     * @param _mode     */    protected void setOutTransition(int _mode) {        switch (_mode) {            case action_class.TRANSITION.SLIDE:                Slide extSlide = new Slide();                extSlide.setDuration(500);                extSlide.setMode(Visibility.MODE_OUT);                extSlide.setSlideEdge(Gravity.BOTTOM);                getWindow().setReturnTransition(extSlide);                break;            case action_class.TRANSITION.EXPLODE:                Explode explode = new Explode();                explode.setDuration(600);                explode.setMode(Visibility.MODE_OUT);                getWindow().setReturnTransition(explode);                break;            case action_class.TRANSITION.FADE:                break;        }    }    /**     * 设置平移退场动画     *     * @param _duraction     * @param _mode     * @param _intoEdge     */    protected void setOutTransitionWithSlide(int _duraction, int _mode, int _intoEdge) {        Slide slide = new Slide();        slide.setDuration(_duraction);        slide.setMode(_mode);        slide.setSlideEdge(_intoEdge);        getWindow().setReturnTransition(slide);    }    /**     * 退出模拟返回     *     * @param _id     * @param _finish     */    protected void setOnbackListener(int _id, Boolean _finish) {        if (_finish) {            finish();        } else {            this.findViewById(_id).setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.i(MSG, "调用信息");                    new Thread(new Runnable() {                        @Override                        public void run() {                            Utils.runExecCom("input keyevent 4");/*调用CMD命令执行退出的界面*/                        }                    }).start();                }            });        }    }    /**     * 设置分解进场     *     * @param _duraction     * @param _mode     */    protected void setInTransitionWithExplode(int _duraction, int _mode) {        Explode explode = new Explode();        explode.setDuration(_duraction);        explode.setMode(_mode);        getWindow().setReturnTransition(explode);    }}